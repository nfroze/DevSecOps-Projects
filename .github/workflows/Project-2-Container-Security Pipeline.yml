name: Project-2-Container-Security-Pipeline

on:
  push:
    branches: [ "main" ]
    paths:
      - "Project-2-Container-Security/**"
  pull_request:
    branches: [ "main" ]
    paths:
      - "Project-2-Container-Security/**"

jobs:
  build-and-scan:
    name: Build and Scan Image
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Build Docker Image
        working-directory: ./Project-2-Container-Security
        run: docker build -t project-2-secure-app:latest .

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

      - name: Scan Docker Image with Trivy
        run: trivy image --exit-code 1 --severity HIGH,CRITICAL project-2-secure-app:latest

  push-image:
    name: Push Image to Docker Hub
    runs-on: ubuntu-latest
    needs: build-and-scan
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Build Docker Image Again
        working-directory: ./Project-2-Container-Security
        run: docker build -t project-2-secure-app:latest .

      - name: List Docker Images (Debugging Step)
        run: docker images  # Ensure the image exists before tagging

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Tag Docker Image
        run: docker tag project-2-secure-app:latest ${{ secrets.DOCKERHUB_USERNAME }}/project-2-secure-app:latest

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/project-2-secure-app:latest

  deploy:
    name: Deploy to Kubernetes (EC2 K3s)
    runs-on: ubuntu-latest
    needs: push-image
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install Kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: "latest"

      - name: Configure Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 --decode > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Verify Connection to Kubernetes
        run: kubectl get nodes

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f ./Project-2-Container-Security/k8s-manifests/deployment.yaml
          kubectl rollout status deployment project-2-secure-app