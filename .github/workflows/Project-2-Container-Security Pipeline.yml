name: Project-2-Container-Security-Pipeline

on:
  push:
    branches: [ "main" ]
    paths:
      - "Project-2-Container-Security/**"
  pull_request:
    branches: [ "main" ]
    paths:
      - "Project-2-Container-Security/**"

jobs:
  build-scan-push-deploy:
    name: Build, Scan, Push Docker Image, and Deploy to K3s
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Check out code
        uses: actions/checkout@v2

      # Step 2: Build Docker image
      - name: Build Docker Image
        working-directory: ./Project-2-Container-Security
        run: docker build -t nfroze/project-2-secure-app:latest .

      # Step 3: Install Trivy for vulnerability scanning
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

      # Step 4: Scan Docker image with Trivy for high and critical vulnerabilities
      - name: Scan Docker Image with Trivy
        run: trivy image --exit-code 1 --severity HIGH,CRITICAL nfroze/project-2-secure-app:latest

      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      # Step 6: Tag Docker image
      - name: Tag Docker Image
        run: docker tag nfroze/project-2-secure-app:latest ${{ secrets.DOCKERHUB_USERNAME }}/project-2-secure-app:latest

      # Step 7: Push Docker image to Docker Hub
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/project-2-secure-app:latest

      # Step 8: Check if KUBECONFIG is set correctly
      - name: Check KUBECONFIG secret
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml  # Save the kubeconfig secret to a file
          cat kubeconfig.yaml  # Output the kubeconfig content to verify it
          kubectl config view  # Verify the config
          kubectl get nodes    # Verify that kubectl can connect to the cluster

      # Step 9: Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.24.0'

      # Step 10: Deploy the Docker image to K3s (both deployment and service)
      - name: Deploy to K3s
        run: |
          kubectl apply -f ./Project-2-Container-Security/k8s-manifests/deployment.yaml
          kubectl apply -f ./Project-2-Container-Security/k8s-manifests/service.yaml